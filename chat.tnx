import 'dart:async';

import 'package:appwrite/appwrite.dart';
import 'package:appwrite/models.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:getwidget/getwidget.dart';
import 'package:intl/intl.dart';
import 'package:uniswap/common/widgets/appbar/appbar.dart';
import 'package:uniswap/common/widgets/button/custom_elevated_button.dart';
import 'package:uniswap/common/widgets/form/custom_text_form_field.dart';
import 'package:uniswap/common/widgets/image_preview_widget.dart';
import 'package:uniswap/controllers/database_controller.dart';
import 'package:uniswap/controllers/product_controller.dart';
import 'package:uniswap/core/app_export.dart';
import 'package:uniswap/core/utils/credentials.dart';
import 'package:uniswap/core/utils/helpers/loaders.dart';
import 'package:uniswap/data/saved_data.dart';
import 'package:uniswap/features/personalization/screen/profile_screen/profile_screen.dart';
import 'package:uniswap/models/user.dart';
import 'package:uniswap/theme/custom_button_style.dart';

class ChattingScreen extends StatefulWidget {
  // const ChattingScreen({super.key, this.sellerUserId, this.sellerName, this.sellerImage, this.sellerAvatar});
  const ChattingScreen({super.key, this.sellerUserId});

  final String? sellerUserId;
  // final String? sellerName;
  // final String? sellerImage;
  // final String? sellerAvatar;

  @override
  State<ChattingScreen> createState() => _ChattingScreenState();
}

class _ChattingScreenState extends State<ChattingScreen> {
  bool isSelectedSwitch = false;

  final DatabaseController controller = Get.put(DatabaseController());
  final productcontroller = Get.put(ProductController());

  TextEditingController messageController = TextEditingController();
  List<Document> messages = [];
  UserModel? _userDetails;
  StreamSubscription<RealtimeMessage>? subscription;

  @override
  void initState() {
    super.initState();
     WidgetsBinding.instance.addPostFrameCallback((_) {
    _fetchUserDetails();
    });
    fetchMessages();
    _subscribeToRealtimeUpdates();
        // Fetch user details when the screen is initialized
   
  }

   Future<void> _fetchUserDetails() async {
    try {
      final user = await productcontroller.getUserById(widget.sellerUserId);
      setState(() {
        _userDetails = user;
      });
    } catch (e) {
      TLoaders.errorSnackBar(
        title: "Error",
        message: e.toString(),
      );
    }
  }

  String formatTime(String timestamp) {
    // Parse the timestamp string into a DateTime object
    final dateTime = DateTime.parse(timestamp);

    // Format the DateTime object to "9:40 am" format
    return DateFormat('h:mm a').format(dateTime);
  }

  final userId = SavedData.getUserId();

  Future<void> fetchMessages() async {
    final fetchedMessages = await controller.getMessages(userId, widget.sellerUserId ?? "");
    setState(() {
      messages = fetchedMessages;
    });
  }

  void _subscribeToRealtimeUpdates() {
    subscription = controller.subscribeToChat().listen((RealtimeMessage message) {
      if ((message.payload['senderId'] == userId && message.payload['receiverId'] == widget.sellerUserId) ||
          (message.payload['senderId'] == widget.sellerUserId && message.payload['receiverId'] == userId)) {
        setState(() {
          messages.add(Document.fromMap(message.payload));
        });
      }
    });
  }

  @override
  void dispose() {
    subscription?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        resizeToAvoidBottomInset: true,
        appBar: TAppBar(
          showBackArrow: true,
          title: Wrap(
            crossAxisAlignment: WrapCrossAlignment.center,
            spacing: 5,
            children: [
              Container(
                height: 10.h,
                width: 10.w,
                decoration: BoxDecoration(
                  color: appTheme.teal400,
                  borderRadius: BorderRadius.circular(5.w),
                ),
              ),
              Text(
                _userDetails!.name ?? "",
                style: CustomTextStyles.text16Bold,
              ),
            ],
          ),
        ),
        body: Container(
          width: double.maxFinite,
          height: double.maxFinite,
          padding: EdgeInsets.symmetric(horizontal: 24.w, vertical: 24.h),
          child: Column(
            children: [
              _buildAppeal(context),
              SizedBox(height: 24.h),
              Expanded(
                child: _buildResponderSMessage(context),
              ),
              _buildMessage(context),
            ],
          ),
        ),
        // bottomNavigationBar: _buildMessage(context),
      ),
    );
  }

  /// Section Widget
  Widget _buildAppeal(BuildContext context) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.center,
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        CustomElevatedButton(
          height: 24.h,
          width: 85.w,
          text: "Appeal",
          buttonStyle: CustomButtonStyles.fillTealA,
          buttonTextStyle: CustomTextStyles.text14w400,
          onPressed: () {},
        ),
        Wrap(
          alignment: WrapAlignment.center,
          crossAxisAlignment: WrapCrossAlignment.center,
          runAlignment: WrapAlignment.center,
          spacing: 1,
          children: [
            GestureDetector(
              onTap: () {
                Get.to(() => const ProfileScreen());
              },
              child: Text(
                "review User",
                style: CustomTextStyles.text14w400cPrimary,
              ),
            ),
            const Icon(
              Icons.chevron_right,
              color: TColors.primary,
            )
          ],
        ),
        Wrap(
          alignment: WrapAlignment.center,
          crossAxisAlignment: WrapCrossAlignment.center,
          spacing: 8,
          children: [
            GFToggle(
              onChanged: (val) {},
              value: true,
              type: GFToggleType.android,
            ),
            Text(
              "Escrow",
              style: CustomTextStyles.text14w400,
            ),
          ],
        ),
      ],
    );
  }

  /// Section Widget
  Widget _buildResponderSMessage(BuildContext context) {
    return ListView.builder(
      itemCount: messages.length,
      physics: AlwaysScrollableScrollPhysics(),
      itemBuilder: (context, index) {
        final message = messages[index];
        final isSender = message.data['senderId'] == userId;

        if (isSender) {
          // Sender's message UI
          return Container(
            width: double.maxFinite,
            padding: EdgeInsets.only(left: 42.w, bottom: 10),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(vertical: 12.h),
                  child: Text(
                    formatTime(message.data['timestamp']), // Formatted time
                    style: theme.textTheme.bodySmall,
                  ),
                ),
                Expanded(
                  child: Container(
                    margin: EdgeInsets.only(left: 8.w),
                    padding: EdgeInsets.all(10.w),
                    decoration: TAppDecoration.fillCyan50.copyWith(
                      borderRadius: BorderRadiusStyle.customBorderTL101,
                    ),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        SizedBox(height: 2.h),
                        Flexible(
                          child: Text(
                            message.data['message'],
                            maxLines: 5,
                            softWrap: true,
                            overflow: TextOverflow.ellipsis,
                            style: theme.textTheme.bodyMedium,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          );
        } else {
          // Receiver's message UI
          return Row(
            children: [
              _userDetails!.photo.toString().isNotEmpty
                  ? FilePreviewImage(
                      bucketId: Credentials.userBucketId,
                      fileId: _userDetails!.photo.toString(),
                      width: 42.w,
                      height: 42.h,
                      isCircular: true,
                    )
                  : CustomImageView(
                      imagePath: _userDetails!.avatar, // Default profile image
                      height: 42.h,
                      width: 42.w,
                      radius: BorderRadius.circular(50.w),
                    ),
              //  SizedBox(width: 10.w),
              Expanded(
                child: Container(
                  margin: EdgeInsets.symmetric(vertical: 8.h, horizontal: 10.w),
                  padding: EdgeInsets.all(10.w),
                  decoration: TAppDecoration.fillBluegray50.copyWith(
                    borderRadius: BorderRadiusStyle.customBorderBL101,
                  ),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(height: 2.h),
                      Flexible(
                        child: Text(
                          message.data['message'],
                          maxLines: 10,
                          softWrap: true,
                          textAlign: TextAlign.left,
                          overflow: TextOverflow.ellipsis,
                          style: theme.textTheme.bodyMedium,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              // const Spacer(flex: 8),
              Padding(
                padding: EdgeInsets.only(top: 14.h, bottom: 15.h),
                child: Text(
                  formatTime(message.data['timestamp']), // Formatted time
                  style: theme.textTheme.bodySmall,
                ),
              ),
            ],
          );
        }
      },
    );
  }

  /// Section Widget
  Widget _buildMessage(BuildContext context) {
    return Container(
      margin: EdgeInsets.symmetric(
        horizontal: 1.w,
        vertical: 24.h,
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Expanded(
            child: CustomTextFormField(
              autofocus: false,
              controller: messageController,
              hintText: "type a message here...",
              hintStyle: theme.textTheme.bodySmall!,
              textInputAction: TextInputAction.done,
              contentPadding: EdgeInsets.symmetric(horizontal: 12.w, vertical: 20.h),
              borderDecoration: OutlineInputBorder(
                borderSide: BorderSide(color: appTheme.gray50),
                borderRadius: BorderRadius.circular(50),
              ),
              filled: true,
              fillColor: appTheme.gray50,
            ),
          ),
          SizedBox(width: 8.w),
          GestureDetector(
            onTap: () async {
              if (messageController.text.isNotEmpty) {
                await controller.sendMessage(
                  userId,
                  widget.sellerUserId ?? "",
                  messageController.text,
                );
                // await fetchMessages();
                messageController.clear();
              }
            },
            child: Container(
              width: 50.h,
              height: 50.h,
              decoration: BoxDecoration(
                color: appTheme.teal400,
                borderRadius: BorderRadius.circular(50.w),
              ),
              child: Icon(
                Icons.send,
                color: Colors.white,
              ),
            ),
          ),
        ],
      ),
    );
  }
}


{
    "requestSuccessful": true,
    "responseMessage": "success",
    "responseCode": "0",
    "responseBody": {
        "walletName": "Staging Wallet - ref16804248425966",
        "walletReference": "ref16842048425966",
        "customerName": "vinworld-Osueke Vincent",
        "customerEmail": "vincendinho@gmail.com",
        "feeBearer": "SELF",
        "bvnDetails": {
            "bvn": "22145581701",
            "bvnDateOfBirth": "1991-02-20"
        },
        "accountNumber": "8147445824",
        "accountName": "vinworld-Osueke Vincent",
        "topUpAccountDetails": {
            "accountNumber": "3921279677",
            "accountName": "vinworld-Osueke Vincent",
            "bankCode": "001",
            "bankName": "Monnify Test Bank",
            "createdOn": "2025-05-23T03:18:11.484+00:00"
        }
    }
}


import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_dotenv/flutter_dotenv.dart';

class MonnifyService {
  final String _baseUrl = dotenv.env['MONNIFY_BASE_URL']!;
  final String _apiKey = dotenv.env['MONNIFY_API_KEY']!;
  final String _secretKey = dotenv.env['MONNIFY_SECRET_KEY']!;
  final String _contractCode = dotenv.env['MONNIFY_CONTRACT_CODE']!;

  Future<String?> getAccessToken() async {
    final credentials = base64Encode(utf8.encode('$_apiKey:$_secretKey'));
    final response = await http.post(
      Uri.parse('$_baseUrl/auth/login'),
      headers: {
        'Authorization': 'Basic $credentials',
        'Content-Type': 'application/json',
      },
    );

    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      return data['responseBody']['accessToken'];
    } else {
      print('Token error: ${response.body}');
      return null;
    }
  }

  Future<Map<String, dynamic>?> getWalletBalance({
    required String accountNumber,
   
  }) async {
    final token = await getAccessToken();
    if (token == null) return null;

    final body = {
      "accountNumber": accountNumber,
    };

    final response = await http.get(
      Uri.parse('$_baseUrl/disbursements/wallet/balance?accountNumber=$accountNumber'),
      headers: {
        'Authorization': 'Bearer $token',
        'Accept': 'application/json',
      },
    );

    if (response.statusCode == 200) {
      return json.decode(response.body)['responseBody'];
    } else {
      print('Reserved account error: ${response.body}');
      return null;
    }
  }

  // You can also include `initializeTransaction`, `getTransactionStatus` as before
}
