if (box.read('pinCode') != null) {
  Get.to(() => ChoseAvatarScreen());
} else {}

{
  "path": "/storage/emulated/0/Download/example.jpg",
  "name": "example.jpg"
}

final address = box.read('address');
print(address);

final box = GetStorage();
final imageData = box.read('image');

if (imageData != null) {
  String imagePath = imageData['path']; // Get the image path
  String imageName = imageData['name']; // Get the image name
  
  print('Image Path: $imagePath');
  print('Image Name: $imageName');
}

  Future<void> uploadIdentity(String? bvn, String? nin, XFile? image) async {
    EasyLoading.show(status: 'Saving...');
    try {
      if (bvn == null || nin == null || image == null) {
        throw Exception("All fields are required.");
      }

      // Prepare the image data
      final imageData = {
        'path': image.path,
        'name': image.name,
      };

      // Save BVN, NIN, and image data to storage
      final box = GetStorage();
      box.write('bvn', bvn);
      box.write('nin', nin);
      box.write('image', imageData);

      // Dismiss the loading indicator on success
      EasyLoading.dismiss();

      final images = box.read('image');
      final bvns = box.read('bvn');

      if (images != null) {
        String imagePath = images['path']; // Get the image path
        String imageName = images['name']; // Get the image name

        print('Image Path: $imagePath');
        print('Image Name: $imageName');
        print('bvn: $bvns');
      }

      await showDialog(
        context: Get.context!,
        builder: (BuildContext context) => SimpleDialog(
          shape: RoundedRectangleBorder(borderRadius: BorderRadiusStyle.roundedBorder10),
          alignment: Alignment.center,
          contentPadding: EdgeInsets.zero,
          backgroundColor: const Color(0xFFFFFFFF),
          children: [
            buildKYCScreenPopup(context),
          ],
        ),
      );
    } catch (e) {
      EasyLoading.dismiss();
      print("Error uploading BVN: $e");
      Get.snackbar("Error", e.toString());
    }
  }

final String? action = prefs.getString('action');


// Factory constructor for creating an empty UserModel
  factory UserModel.empty() {
    return UserModel(
      id: '',
      name: '',
      email: '',
      avater: '',
      address: '',
      pincode: '',
      phone: '',
      biometric: false,
      basicProgress: false,
      dob: '',
      gender: '',
    );
  }

  Future<void> _redirectToRelevantScreen() async {
    _currentUser = await account.get(); // Fetch user details
    deviceStorage.write('userId', _currentUser?.$id);

    if (_currentUser != null) {
      Get.offAll(() => HomeContainer());
    } else {
      deviceStorage.read('isFirstTime') != true ? Get.offAll(() => const SignInScreen()) : Get.offAll(const OnboardingScreen());
    }
  }


Future<UserModel> fetchUserDetails() async {
    try {
    //   final userId = AuthenticationRepository.instance.user?.$id ?? '';
    final currentUser = AuthenticationRepository.instance.user;
      if (currentUser == null) throw 'User ID not found';

      final document = await _databases.getDocument(
        databaseId: databaseId,
        collectionId: userCollectionId,
        documentId: currentUser.$id,
      );
      return UserModel.fromJson(document.data);
    } on AppwriteException catch (e) {
      // if (e.code == 404) return UserModel.empty();
      throw TAppwriteException(e.message.toString()).message;
    } on FormatException {
      throw const TFormatException();
    } on PlatformException catch (e) {
      throw TPlatformException(e.code).message;
    } catch (_) {
      throw 'An unexpected error occurred. Please try again.';
    }
  }

  UserModel? userData;

void onLoginSuccess(String userId) {
  _storage.write('userId', userId); // Save user ID
  _storage.write('isLoggedIn', true); // Set logged-in status to true
}

//get userId
void printUserId() {
  String? userId = getUserId();
  if (userId != null) {
    print('User ID: $userId');
  } else {
    print('User ID not found');
  }
}

class AuthController extends GetxController {
  final GetStorage _storage = GetStorage();

  // Reactive logged-in status
  RxBool isLoggedIn = false.obs;

  @override
  void onInit() {
    super.onInit();
    // Listen for changes to the 'isLoggedIn' key
    _storage.listenKey('isLoggedIn', (value) {
      isLoggedIn.value = value ?? false;
    });
  }

  // Set logged-in status
  void setLoggedIn(bool value) {
    _storage.write('isLoggedIn', value);
  }
}

class HomeScreen extends StatelessWidget {
  final AuthController authController = Get.find();

  @override
  Widget build(BuildContext context) {
    return Obx(() {
      return Scaffold(
        body: Center(
          child: Text(
            authController.isLoggedIn.value ? 'Logged In' : 'Logged Out',
            style: TextStyle(fontSize: 24),
          ),
        ),
      );
    });
  }
}


import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:uniswap/common/widgets/image_preview_widget.dart';
import 'package:uniswap/common/widgets/loaders/shimmer.dart';
import 'package:uniswap/core/app_export.dart';
import 'package:uniswap/core/utils/credentials.dart';
import 'package:uniswap/features/authentication/model/user.dart';
import 'package:uniswap/features/personalization/controller/user_controller.dart'; // Your app's export file // Import your UserController

class UserHeaderProfile extends StatefulWidget {
  const UserHeaderProfile({super.key});

  @override
  State<UserHeaderProfile> createState() => _UserHeaderProfileState();
}

class _UserHeaderProfileState extends State<UserHeaderProfile> {
  final UserController controller = Get.find(); // Get the globally registered UserController

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.maxFinite,
      child: Padding(
        padding: EdgeInsets.only(right: 9.w),
        child: FutureBuilder(
          future: controller.fetchUserData(),
          builder: (ctx, snapshot) {
            if (snapshot.connectionState == ConnectionState.done) {
              // Show a loading indicator while fetching data
              return TShimmerEffect(
                width: double.maxFinite,
                height: 72.h,
                color: const Color(0xFFE2E8F0),
              );
            } else if (snapshot.hasError) {
              return Center(
                child: Text(
                  '${snapshot.error} occurred',
                ),
              );
            } else if (snapshot.hasError) {
              return Center(child: Text("Error: ${snapshot.error}"));
            } else if (!snapshot.hasData || snapshot.data == null) {
              return Center(child: Text("No user data found."));
            } else {
              UserModel userData = snapshot.data!;
              return Row(
                children: [
                  // Profile Image
                  userData!.photo.isEmpty
                      ? FilePreviewImage(
                          bucketId: Credentials.productBucketId,
                          fileId: controller.userData!.photo.toString(),
                          width: double.maxFinite,
                          height: 116.h,
                          isCircular: false,
                          imageborderRadius: BorderRadius.only(
                            topLeft: Radius.circular(10),
                            topRight: Radius.circular(10),
                          ),
                        )
                      : CustomImageView(
                          imagePath: controller.userData!.avatar ?? TImages.profile, // Default profile image
                          height: 72.h,
                          width: 72.w,
                          radius: BorderRadius.circular(50.w),
                        ),

                  // User Details
                  Padding(
                    padding: EdgeInsets.only(left: 15.w, top: 15.h, bottom: 13.h),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text("Good day", style: CustomTextStyles.text16w400),
                        SizedBox(height: 2.h),
                        Text(
                          controller.userData!.name.toString(), // User's name
                          style: TextStyle(
                            fontSize: 16.sp,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              );
            
            }
          },
        ),
      ),
    );
  }
}



// if (controller.user.value == null) {
//         // Show a loading indicator while fetching user data
//         return Center(child: CircularProgressIndicator());
//       }

setState(() {
       
});

import 'dart:convert';
import 'package:get_storage/get_storage.dart';
import 'package:uniswap/models/user.dart';

class SavedData {
  static final GetStorage box = GetStorage(); 

  // Save user id on device
  static Future<void> saveUserId(String id) async {
    await box.write("userId", id);
  }

  // Get the user Id
  static String getUserId() {
    return box.read("userId") ?? "";
  }

  // Save user name
  static Future<void> saveUserName(String name) async {
    await box.write("name", name);
  }

  // Get the user name
  static String getUserName() {
    return box.read("name") ?? "";
  }

  // Save user email
  static Future<void> saveUserEmail(String email) async {
    await box.write("email", email);
  }

  // Get the user email
  static String getUserEmail() {
    return box.read("email") ?? "";
  }

  // Save user avatar
  static Future<void> saveUserAvatar(String avatar) async {
    await box.write("avatar", avatar);
  }

  // Get user avatar
  static String getUserAvatar() {
    return box.read("avatar") ?? "";
  }

  // Save user image ID
  static Future<void> saveUserImageId(String imageId) async {
    await box.write("imageId", imageId);
  }

  // Get user image ID
  static String getUserImageId() {
    return box.read("imageId") ?? "";
  }


  // Clear the saved data
  static Future<void> clearSavedData() async {
    await box.erase();
    print("Saved data cleared");
  }

  // Clear only user data
  static Future<void> clearUserData() async {
    await box.remove("user"); // Remove only the user data
    print("User data cleared");
  }
}


class SearchProduct extends StatefulWidget {
  const SearchProduct({super.key});

  @override
  State<SearchProduct> createState() => _SearchProductState();
}

class _SearchProductState extends State<SearchProduct> {
  final TextEditingController searchController = TextEditingController();
  final ProductController productController = Get.put(ProductController());
  List<dynamic> searchResults = [];

  void searchProducts(String value) async {
    if (value.isNotEmpty) {
      final results = await productController.searchProducts(value);
      setState(() {
        searchResults = results;
      });
    } else {
      setState(() {
        searchResults = [];
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 24.w, vertical: 40.h),
      child: Column(
        children: [
          CustomSearchView(
            controller: searchController,
            onChanged: searchProducts, // Calls searchProducts function on input
            borderDecoration: OutlineInputBorder(
              borderSide: const BorderSide(color: TColors.softGrey),
              borderRadius: BorderRadius.circular(50.w),
            ),
            autofocus: false,
            hintText: "Search",
            contentPadding: EdgeInsets.symmetric(vertical: 19.h),
            fillColor: TColors.softGrey,
          ),
          // Display search results
          // Expanded(
          //   child: ListView.builder(
          //     itemCount: searchResults.length,
          //     itemBuilder: (context, index) {
          //       final product = searchResults[index];

          //       // Ensure 'productName' and 'productDescription' are not null
          //       final productName = product.data['productName'] ?? 'Unnamed Product'; // Fallback if null
          //       final productDescription = product.data['productDescription'] ?? 'No description available'; // Fallback if null

          //       return ListTile(
          //         title: Text(productName),
          //         subtitle: Text(productDescription),
          //       );
          //     },
          //   ),
          // ),

          Expanded(
            child: GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                mainAxisExtent: 204.h,
                crossAxisCount: 2,
                mainAxisSpacing: 22.h,
                crossAxisSpacing: 22.h,
              ),
              physics: const AlwaysScrollableScrollPhysics(),
              itemCount: searchResults.length,
              itemBuilder: (context, index) {
                final product = searchResults[index];
                final List? images = product.data['image'];

                return GestureDetector(
                  onTap: () {
                    Get.to(() => ItemDecriptionScreen(product: product));
                  },
                  child: Container(
                    decoration: BoxDecoration(
                      color: const Color(0xFFF1F5F9),
                      borderRadius: BorderRadius.circular(10.w),
                    ),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        SizedBox(
                          height: 116.h,
                          width: 159.w,
                          child: Stack(
                            alignment: Alignment.topRight,
                            children: [
                              if (images != null && images.isNotEmpty)
                                FilePreviewImage(
                                  bucketId: Credentials.productBucketId,
                                  fileId: images[0],
                                  width: double.maxFinite,
                                  height: 116.h,
                                  isCircular: false,
                                  imageborderRadius: BorderRadius.only(
                                    topLeft: Radius.circular(10),
                                    topRight: Radius.circular(10),
                                  ),
                                )
                              else
                                const Placeholder(
                                  fallbackHeight: 116,
                                  fallbackWidth: double.maxFinite,
                                  color: Colors.grey,
                                ),
                              
                              Liked(),
                            ],
                          ),
                        ),
                        SizedBox(height: 8.h),
                        Padding(
                          padding: EdgeInsets.only(left: 6.w),
                          child: Row(
                            children: [
                              Text(
                                product.data['productName'] ?? "",
                                style: CustomTextStyles.text12w400,
                              ),
                              SizedBox(width: 4.w),
                              Text(
                                "(${product.data['productCondition'] ?? "N/A"})",
                                style: product.data['productCondition'] == "New" ? CustomTextStyles.text12w400cPrimary : CustomTextStyles.text12w400cpink,
                              ),
                            ],
                          ),
                        ),
                        SizedBox(height: 4.h),
                        Align(
                          alignment: Alignment.center,
                          child: SizedBox(
                            width: 147.w,
                            child: const Divider(color: Color(0xFFE2E8F0)),
                          ),
                        ),
                        SizedBox(height: 5.h),
                        Padding(
                          padding: EdgeInsets.only(left: 6.w),
                          child: Text(
                            "₦${NumberFormat('#,##0', 'en_US').format(int.tryParse(product.data['startPrice'] ?? '0') ?? 0)}",
                            style: CustomTextStyles.text12wBold,
                          ),
                        ),
                        SizedBox(height: 5.h),
                        Padding(
                          padding: EdgeInsets.symmetric(horizontal: 6.w),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                product.data['location'] ?? "Unknown",
                                style: CustomTextStyles.text12w400,
                              ),
                              Icon(
                                Icons.location_on_outlined,
                                size: 18.sp,
                                color: TColors.gray200,
                              ),
                            ],
                          ),
                        ),
                        SizedBox(height: 5.h),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}


FLW_PUBLIC_KEY=FLWPUBK_TEST-544a2d31219d73eb8d0ba168007571b2-X
FLW_SECRET_KEY=FLWSECK_TEST-b9b05dae17364815e6e737d9c884272b-X


GestureDetector(
              onTap: () {
                showModalBottomSheet(
                  context: context,
                  isScrollControlled: true, // if you need full height behavior
                  builder: (BuildContext context) {
                    return SingleChildScrollView(
                      padding: EdgeInsets.all(40),
                      child: Column(
                        children: [
                          Text(
                            "Rate Seller",
                            style: theme.textTheme.bodyMedium,
                          ),
                          SizedBox(height: 34.h),
                          CustomTextFormField(
                            controller: commentController,
                            hintText: "Add comment",
                            hintStyle: theme.textTheme.bodyLarge!,
                            textInputAction: TextInputAction.done,
                            maxLines: 5,
                            contentPadding: EdgeInsets.symmetric(
                              horizontal: 10.w,
                              vertical: 8.h,
                            ),
                            borderDecoration: TextFormFieldStyleHelper.outlineOnErrorTL8,
                            filled: true,
                            fillColor: theme.colorScheme.onPrimaryContainer.withOpacity(1),
                          ),
                          SizedBox(height: 44.h),
                          Padding(
                            padding: EdgeInsets.only(right: 8.w),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  "Communication",
                                  style: theme.textTheme.bodyMedium,
                                ),
                                CustomRatingBar(
                                  initialRating: 3,
                                  color: appTheme.orange800,
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: 23.h),
                          Padding(
                            padding: EdgeInsets.only(right: 8.w),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Padding(
                                  padding: EdgeInsets.only(top: 1.h),
                                  child: Text(
                                    "Products quality",
                                    style: theme.textTheme.bodyMedium,
                                  ),
                                ),
                                CustomRatingBar(
                                  initialRating: 5,
                                  color: appTheme.orange800,
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: 21.h),
                          Padding(
                            padding: EdgeInsets.only(right: 8.w),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Padding(
                                  padding: EdgeInsets.only(top: 1.h),
                                  child: Text(
                                    "Easy going",
                                    style: theme.textTheme.bodyMedium,
                                  ),
                                ),
                                CustomRatingBar(
                                  initialRating: 5,
                                  color: appTheme.orange800,
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: 52.h),
                          Container(
                            padding: EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              border: Border.all(color: Color(0xFF42D8B9)),
                              borderRadius: BorderRadius.circular(10)
                            ),
                            child: Column(
                              children: [
                                Text(
                                  "Overall rating",
                                  style: theme.textTheme.bodyMedium,
                                ),
                                SizedBox(height: 14.h),
                                Text(
                                  "0.0",
                                  style: CustomTextStyles.text20bold,
                                ),
                                SizedBox(height: 14.h),
                                CustomRatingBar(
                                  initialRating: 5,
                                  itemSize: 24,
                                  color: appTheme.orange800,
                                ),
                                SizedBox(height: 25.h),
                                Text(
                                  "Based off no review",
                                  style: theme.textTheme.bodyMedium,
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: 35.h),
                          CustomElevatedButton(
                            text: "Done",
                          ),
                          SizedBox(height: 5.h),
                        ],
                      ),
                    );
                  },
                );
              },
              child: Text(
                "review User",
                style: CustomTextStyles.text14w400cPrimary,
              ),
            ),
           

final getUser = productController.products.where((categoryId) => categoryId.catId == widget.categoryId).toList();

 validator: (value) {
  if (value!.isEmpty) {
    return "Please enter a location";
  }
  return null;
},

  Future<void> _initializeApp() async {
    // Simulate a splash screen delay (e.g., 2 seconds)
    await Future.delayed(const Duration(seconds: 2));
    // await account.deleteSession(sessionId: 'current');
    try {
      // Check if the user is logged in
      final bool isLoggedIn = await controller.checkSessions();

      final userData = SavedData.getUserData();
      if (userData == null || userData.isEmpty) {
        TLoaders.warningSnackBar(title: "Waening", message: "User not found");
      }

      if (isLoggedIn) {
        Get.offAll(() => HomeContainer());
      } else {
        Get.offAll(() => const SignUpScreen());
      }
      // Access individual fields from the user data

      // Navigate to the appropriate screen
      // if (isLoggedIn) {
      //   if (userData['basicProgress'] == false) {
      //     Get.offAll(() => const CreatePinScreen());
      //   } else {
      //     Get.offAll(() => HomeContainer());
      //   }
      // } else {
      //   final GetStorage deviceStorage = GetStorage();
      //   deviceStorage.writeIfNull('isFirstTime', true);
      //   if (deviceStorage.read('isFirstTime') == false) {
      //     Get.offAll(() => const OnboardingScreen());
      //   } else {
      //     Get.offAll(() => const SignUpScreen());
      //   }
      // }
    } catch (e) {
      // Handle errors (e.g., network issues)
      Get.snackbar(
        "Error",
        "Failed to check user session: $e",
        snackPosition: SnackPosition.BOTTOM,
      );

      // Navigate to the sign-in screen as a fallback
      Get.offAll(() => const SignInScreen());
    }
  }


https://cloud.appwrite.io/v1/storage/buckets/662faabe001a20bb87c6/files/${otherUser.profilePic}/view?project=662e8e5c002f2d77a17c&mode=admin"
image = `${import.meta.env.VITE_APPWRITE_ENDPOINT}/storage/buckets/${storageBucketId}/files/${uploadedFile.$id}/view?project=${import.meta.env.VITE_APPWRITE_PROJECT_ID}&project=${import.meta.env.VITE_APPWRITE_PROJECT_ID}&mode=admin`;



import 'package:flutter/material.dart';
import 'package:uniswap/common/widgets/button/custom_elevated_button.dart';
import 'package:uniswap/common/widgets/form/custom_text_form_field.dart';
import 'package:uniswap/common/widgets/layouts/positioning_layout.dart';
import 'package:uniswap/core/app_export.dart';
import 'package:uniswap/theme/custom_button_style.dart';

class InputPinScreen extends StatefulWidget {
   const InputPinScreen({
    super.key,
   
    required this.pincontroller,
    required this.onConfirm,
    
    // this.title = "INPUT PIN",
    this.description = "Input your 4-digit pin to complete transaction",
    this.buttonText = "Confirm Payment",

    // required this.price,
    // this.sellerId,
    // this.deliveryTime,
    // this.deliveryDate,
    // this.exchange,
    // this.location,
    // this.productId,
  });

  

  // final double price;
  // final String? sellerId;
  // final String? productId;
  // final String? deliveryTime;
  // final String? deliveryDate;
  // final String? exchange;
  // final String? location;

  final TextEditingController pincontroller;
  final VoidCallback onConfirm;
  // final String title;
  final String description;
  final String buttonText;

  @override
  State<InputPinScreen> createState() => _InputPinScreenState();
}

class _InputPinScreenState extends State<InputPinScreen> {
  // 
  @override
  Widget build(BuildContext context) {
    return PositioningLayout(
      child: Container(
        height: 317.h,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(10),
          color: Colors.white,
        ),
        child: Align(
          alignment: Alignment.center,
          child: Padding(
            padding: EdgeInsets.only(left: 16.w, right: 16.w),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Align(
                  alignment: Alignment.center,
                  child: Text(
                    "INPUT PIN",
                    style: CustomTextStyles.text14w400,
                  ),
                ),
                SizedBox(height: 8.h),
                Align(
                  alignment: Alignment.center,
                  child: Text(
                    widget.description,
                    // "Input your 4-digit pin to complete transaction",
                    style: CustomTextStyles.text12w400,
                  ),
                ),
                SizedBox(height: 27.h),
                CustomTextFormField(
                  controller: widget.pincontroller,
                  hintText: "****",
                  obscureText: true,
                  textInputType: TextInputType.number,
                  hintStyle: CustomTextStyles.text12w400,
                  textInputAction: TextInputAction.done,
                  contentPadding: EdgeInsets.symmetric(
                    horizontal: 11.w,
                    vertical: 8.h,
                  ),
                ),
                SizedBox(height: 27.h),
                CustomElevatedButton(
                  // onPressed: () => _processPayment(context),
                  onPressed: widget.onConfirm,
                  height: 39.h,
                  text: "Confirm Payment",
                  buttonStyle: CustomButtonStyles.fillPrimaryTL7,
                  buttonTextStyle: theme.textTheme.labelLarge!,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}


 Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Discounts (optional)",
                                  style: TextStyle(
                                      fontSize: 14.sp,
                                      fontWeight: FontWeight.bold,
                                      color: Color(0xFF475569)),
                                ),
                                SizedBox(height: 24.h),
                                Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          "Percentage (%)",
                                          style: CustomTextStyles.text14w400,
                                        ),
                                        SizedBox(height: 4.h),
                                        CustomTextFormField(
                                          width: 148.w,
                                          controller: percentageController,
                                          borderDecoration:
                                              TextFormFieldStyleHelper
                                                  .outlineOnErrorTL25,
                                          filled: true,
                                          fillColor: theme
                                              .colorScheme.onPrimaryContainer
                                              .withOpacity(1),
                                        ),
                                      ],
                                    ),
                                    Padding(
                                      padding: EdgeInsets.only(
                                          top: 34.h, bottom: 12.h),
                                      child: Text(
                                        "=",
                                        style: CustomTextStyles.text12w400,
                                      ),
                                    ),
                                    Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          "Price",
                                          style: CustomTextStyles.text12w400,
                                        ),
                                        SizedBox(height: 4.h),
                                        CustomTextFormField(
                                          width: 148.w,
                                          controller: discountPriceController,
                                          borderDecoration:
                                              TextFormFieldStyleHelper
                                                  .outlineOnErrorTL25,
                                          filled: true,
                                          fillColor: theme
                                              .colorScheme.onPrimaryContainer
                                              .withOpacity(1),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          